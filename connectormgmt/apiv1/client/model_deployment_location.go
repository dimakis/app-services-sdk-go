/*
 * Connector Service Fleet Manager
 *
 * Connector Service Fleet Manager is a Rest API to manage connectors.
 *
 * API version: 0.1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package connectormgmtclient

import (
	"encoding/json"
	"fmt"
)

// DeploymentLocation - struct for DeploymentLocation
type DeploymentLocation struct {
	ConnectorClusterTarget *ConnectorClusterTarget
}

// ConnectorClusterTargetAsDeploymentLocation is a convenience function that returns ConnectorClusterTarget wrapped in DeploymentLocation
func ConnectorClusterTargetAsDeploymentLocation(v *ConnectorClusterTarget) DeploymentLocation {
	return DeploymentLocation{ ConnectorClusterTarget: v}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *DeploymentLocation) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into ConnectorClusterTarget
	err = json.Unmarshal(data, &dst.ConnectorClusterTarget)
	if err == nil {
		jsonConnectorClusterTarget, _ := json.Marshal(dst.ConnectorClusterTarget)
		if string(jsonConnectorClusterTarget) == "{}" { // empty struct
			dst.ConnectorClusterTarget = nil
		} else {
			match++
		}
	} else {
		dst.ConnectorClusterTarget = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.ConnectorClusterTarget = nil

		return fmt.Errorf("Data matches more than one schema in oneOf(DeploymentLocation)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("Data failed to match schemas in oneOf(DeploymentLocation)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src DeploymentLocation) MarshalJSON() ([]byte, error) {
	if src.ConnectorClusterTarget != nil {
		return json.Marshal(&src.ConnectorClusterTarget)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *DeploymentLocation) GetActualInstance() (interface{}) {
	if obj.ConnectorClusterTarget != nil {
		return obj.ConnectorClusterTarget
	}

	// all schemas are nil
	return nil
}

type NullableDeploymentLocation struct {
	value *DeploymentLocation
	isSet bool
}

func (v NullableDeploymentLocation) Get() *DeploymentLocation {
	return v.value
}

func (v *NullableDeploymentLocation) Set(val *DeploymentLocation) {
	v.value = val
	v.isSet = true
}

func (v NullableDeploymentLocation) IsSet() bool {
	return v.isSet
}

func (v *NullableDeploymentLocation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDeploymentLocation(val *DeploymentLocation) *NullableDeploymentLocation {
	return &NullableDeploymentLocation{value: val, isSet: true}
}

func (v NullableDeploymentLocation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDeploymentLocation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


