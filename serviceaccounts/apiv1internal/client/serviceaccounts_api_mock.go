// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package serviceaccountsclient

import (
	_context "context"
	_nethttp "net/http"
	"sync"
)

// Ensure, that ServiceaccountsApiMock does implement ServiceaccountsApi.
// If this is not the case, regenerate this file with moq.
var _ ServiceaccountsApi = &ServiceaccountsApiMock{}

// ServiceaccountsApiMock is a mock implementation of ServiceaccountsApi.
//
// 	func TestSomethingThatUsesServiceaccountsApi(t *testing.T) {
//
// 		// make and configure a mocked ServiceaccountsApi
// 		mockedServiceaccountsApi := &ServiceaccountsApiMock{
// 			GetServiceAccountFunc: func(ctx _context.Context, id string) ApiGetServiceAccountRequest {
// 				panic("mock out the GetServiceAccount method")
// 			},
// 			GetServiceAccountExecuteFunc: func(r ApiGetServiceAccountRequest) (ServiceAccountData, *_nethttp.Response, error) {
// 				panic("mock out the GetServiceAccountExecute method")
// 			},
// 			ResetServiceAccountSecretFunc: func(ctx _context.Context, id string) ApiResetServiceAccountSecretRequest {
// 				panic("mock out the ResetServiceAccountSecret method")
// 			},
// 			ResetServiceAccountSecretExecuteFunc: func(r ApiResetServiceAccountSecretRequest) (ServiceAccountData, *_nethttp.Response, error) {
// 				panic("mock out the ResetServiceAccountSecretExecute method")
// 			},
// 		}
//
// 		// use mockedServiceaccountsApi in code that requires ServiceaccountsApi
// 		// and then make assertions.
//
// 	}
type ServiceaccountsApiMock struct {
	// GetServiceAccountFunc mocks the GetServiceAccount method.
	GetServiceAccountFunc func(ctx _context.Context, id string) ApiGetServiceAccountRequest

	// GetServiceAccountExecuteFunc mocks the GetServiceAccountExecute method.
	GetServiceAccountExecuteFunc func(r ApiGetServiceAccountRequest) (ServiceAccountData, *_nethttp.Response, error)

	// ResetServiceAccountSecretFunc mocks the ResetServiceAccountSecret method.
	ResetServiceAccountSecretFunc func(ctx _context.Context, id string) ApiResetServiceAccountSecretRequest

	// ResetServiceAccountSecretExecuteFunc mocks the ResetServiceAccountSecretExecute method.
	ResetServiceAccountSecretExecuteFunc func(r ApiResetServiceAccountSecretRequest) (ServiceAccountData, *_nethttp.Response, error)

	// calls tracks calls to the methods.
	calls struct {
		// GetServiceAccount holds details about calls to the GetServiceAccount method.
		GetServiceAccount []struct {
			// Ctx is the ctx argument value.
			Ctx _context.Context
			// ID is the id argument value.
			ID string
		}
		// GetServiceAccountExecute holds details about calls to the GetServiceAccountExecute method.
		GetServiceAccountExecute []struct {
			// R is the r argument value.
			R ApiGetServiceAccountRequest
		}
		// ResetServiceAccountSecret holds details about calls to the ResetServiceAccountSecret method.
		ResetServiceAccountSecret []struct {
			// Ctx is the ctx argument value.
			Ctx _context.Context
			// ID is the id argument value.
			ID string
		}
		// ResetServiceAccountSecretExecute holds details about calls to the ResetServiceAccountSecretExecute method.
		ResetServiceAccountSecretExecute []struct {
			// R is the r argument value.
			R ApiResetServiceAccountSecretRequest
		}
	}
	lockGetServiceAccount                sync.RWMutex
	lockGetServiceAccountExecute         sync.RWMutex
	lockResetServiceAccountSecret        sync.RWMutex
	lockResetServiceAccountSecretExecute sync.RWMutex
}

// GetServiceAccount calls GetServiceAccountFunc.
func (mock *ServiceaccountsApiMock) GetServiceAccount(ctx _context.Context, id string) ApiGetServiceAccountRequest {
	if mock.GetServiceAccountFunc == nil {
		panic("ServiceaccountsApiMock.GetServiceAccountFunc: method is nil but ServiceaccountsApi.GetServiceAccount was just called")
	}
	callInfo := struct {
		Ctx _context.Context
		ID  string
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockGetServiceAccount.Lock()
	mock.calls.GetServiceAccount = append(mock.calls.GetServiceAccount, callInfo)
	mock.lockGetServiceAccount.Unlock()
	return mock.GetServiceAccountFunc(ctx, id)
}

// GetServiceAccountCalls gets all the calls that were made to GetServiceAccount.
// Check the length with:
//     len(mockedServiceaccountsApi.GetServiceAccountCalls())
func (mock *ServiceaccountsApiMock) GetServiceAccountCalls() []struct {
	Ctx _context.Context
	ID  string
} {
	var calls []struct {
		Ctx _context.Context
		ID  string
	}
	mock.lockGetServiceAccount.RLock()
	calls = mock.calls.GetServiceAccount
	mock.lockGetServiceAccount.RUnlock()
	return calls
}

// GetServiceAccountExecute calls GetServiceAccountExecuteFunc.
func (mock *ServiceaccountsApiMock) GetServiceAccountExecute(r ApiGetServiceAccountRequest) (ServiceAccountData, *_nethttp.Response, error) {
	if mock.GetServiceAccountExecuteFunc == nil {
		panic("ServiceaccountsApiMock.GetServiceAccountExecuteFunc: method is nil but ServiceaccountsApi.GetServiceAccountExecute was just called")
	}
	callInfo := struct {
		R ApiGetServiceAccountRequest
	}{
		R: r,
	}
	mock.lockGetServiceAccountExecute.Lock()
	mock.calls.GetServiceAccountExecute = append(mock.calls.GetServiceAccountExecute, callInfo)
	mock.lockGetServiceAccountExecute.Unlock()
	return mock.GetServiceAccountExecuteFunc(r)
}

// GetServiceAccountExecuteCalls gets all the calls that were made to GetServiceAccountExecute.
// Check the length with:
//     len(mockedServiceaccountsApi.GetServiceAccountExecuteCalls())
func (mock *ServiceaccountsApiMock) GetServiceAccountExecuteCalls() []struct {
	R ApiGetServiceAccountRequest
} {
	var calls []struct {
		R ApiGetServiceAccountRequest
	}
	mock.lockGetServiceAccountExecute.RLock()
	calls = mock.calls.GetServiceAccountExecute
	mock.lockGetServiceAccountExecute.RUnlock()
	return calls
}

// ResetServiceAccountSecret calls ResetServiceAccountSecretFunc.
func (mock *ServiceaccountsApiMock) ResetServiceAccountSecret(ctx _context.Context, id string) ApiResetServiceAccountSecretRequest {
	if mock.ResetServiceAccountSecretFunc == nil {
		panic("ServiceaccountsApiMock.ResetServiceAccountSecretFunc: method is nil but ServiceaccountsApi.ResetServiceAccountSecret was just called")
	}
	callInfo := struct {
		Ctx _context.Context
		ID  string
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockResetServiceAccountSecret.Lock()
	mock.calls.ResetServiceAccountSecret = append(mock.calls.ResetServiceAccountSecret, callInfo)
	mock.lockResetServiceAccountSecret.Unlock()
	return mock.ResetServiceAccountSecretFunc(ctx, id)
}

// ResetServiceAccountSecretCalls gets all the calls that were made to ResetServiceAccountSecret.
// Check the length with:
//     len(mockedServiceaccountsApi.ResetServiceAccountSecretCalls())
func (mock *ServiceaccountsApiMock) ResetServiceAccountSecretCalls() []struct {
	Ctx _context.Context
	ID  string
} {
	var calls []struct {
		Ctx _context.Context
		ID  string
	}
	mock.lockResetServiceAccountSecret.RLock()
	calls = mock.calls.ResetServiceAccountSecret
	mock.lockResetServiceAccountSecret.RUnlock()
	return calls
}

// ResetServiceAccountSecretExecute calls ResetServiceAccountSecretExecuteFunc.
func (mock *ServiceaccountsApiMock) ResetServiceAccountSecretExecute(r ApiResetServiceAccountSecretRequest) (ServiceAccountData, *_nethttp.Response, error) {
	if mock.ResetServiceAccountSecretExecuteFunc == nil {
		panic("ServiceaccountsApiMock.ResetServiceAccountSecretExecuteFunc: method is nil but ServiceaccountsApi.ResetServiceAccountSecretExecute was just called")
	}
	callInfo := struct {
		R ApiResetServiceAccountSecretRequest
	}{
		R: r,
	}
	mock.lockResetServiceAccountSecretExecute.Lock()
	mock.calls.ResetServiceAccountSecretExecute = append(mock.calls.ResetServiceAccountSecretExecute, callInfo)
	mock.lockResetServiceAccountSecretExecute.Unlock()
	return mock.ResetServiceAccountSecretExecuteFunc(r)
}

// ResetServiceAccountSecretExecuteCalls gets all the calls that were made to ResetServiceAccountSecretExecute.
// Check the length with:
//     len(mockedServiceaccountsApi.ResetServiceAccountSecretExecuteCalls())
func (mock *ServiceaccountsApiMock) ResetServiceAccountSecretExecuteCalls() []struct {
	R ApiResetServiceAccountSecretRequest
} {
	var calls []struct {
		R ApiResetServiceAccountSecretRequest
	}
	mock.lockResetServiceAccountSecretExecute.RLock()
	calls = mock.calls.ResetServiceAccountSecretExecute
	mock.lockResetServiceAccountSecretExecute.RUnlock()
	return calls
}
